[
	{
		"id": "ellison-2012-phd-dissertation",
		"type": "thesis",
		"author": "Chucky Ellison",
		"title": "A Formal Semantics of C with Applications",
		"booktitle": "PhD Dissertation",
		"publisher": "University of Illinois",
		"month": "July",
		"year": "2012",
		"uri": "http://hdl.handle.net/2142/34297",
		"pdf": "/papers/ellison-2012-phd-dissertation.pdf",
		"slides": "/papers/ellison-2012-phd-dissertation-slides.pdf",
		"project": "https://github.com/kframework/c-semantics",
		"abstract": [
			"This dissertation shows that complex, real programming languages can be completely formalized in the K Framework, yielding interpreters and analysis tools for testing and bug detection. This is demonstrated by providing, in K, the first complete formal semantics of the C programming language. With varying degrees of effort, tools such as interpreters, debuggers, and model-checkers, together with tools that check for memory safety, races, deadlocks, and undefined behavior are then generated from the semantics.",
			"Being executable, the semantics has been thoroughly tested against the GCC torture test suite and successfully passes 99.2% of 776 test programs. The semantics is also evaluated against popular analysis tools, using a new test suite in addition to a third-party test suite. The semantics-based tool performs at least as well or better than the other tools tested.",
		]
	},
	{
		"id": "hathhorn-ellison-rosu-2015-pldi",
		"type": "conference",
		"author": "Chris Hathhorn, Chucky Ellison, and Grigore Roșu",
		"title": "Defining the Undefinedness of C",
		"booktitle": "Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation",
		"booktitle_short": "PLDI'15",
		"publisher": "ACM",
		"pages": "336–345",
		"year": "2015",
		"doi": "http://dx.doi.org/10.1145/2813885.2737979",
		"pdf": "/papers/hathhorn-ellison-rosu-2015-pldi.pdf",
		// "slides": "/papers/lazar-arusoaie-serbanuta-ellison-mereuta-lucanu-rosu-2012-fm-slides.pdf",
		"abstract": [
			"We present a \"negative\" semantics of the C11 language&mdash;a semantics that does not just give meaning to correct programs, but also rejects undefined programs. We investigate undefined behavior in C and discuss the techniques and special considerations needed for formally specifying it. We have used these techniques to modify and extend a semantics of C into one that captures undefined behavior.  The amount of semantic infrastructure and effort required to achieve this was unexpectedly high, in the end nearly doubling the size of the original semantics. From our semantics, we have automatically extracted an undefinedness checker, which we evaluate against other popular analysis tools, using our own test suite in addition to a third-party test suite. Our checker is capable of detecting examples of all 77 categories of core language undefinedness appearing in the C11 standard, more than any other tool we considered. Based on this evaluation, we argue that our work is the most comprehensive and complete semantic treatment of undefined behavior in C, and thus of the C language itself."
		],
		"notes": "To appear",
	},
	{
		"id": "lazar-arusoaie-serbanuta-ellison-mereuta-lucanu-rosu-2012-fm",
		"type": "conference",
		"author": "David Lazar, Andrei Arusoaie, Traian Florin Șerbănuță, Chucky Ellison, Radu Mereuta, Dorel Lucanu, and Grigore Roșu",
		"title": "Executing Formal Semantics with the K Tool",
		"booktitle": "Formal Methods",
		"booktitle_short": "FM'12",
		"publisher": "Springer",
		"series": "Lecture Notes in Computer Science",
		"volume": "7436",
		"pages": "267–271",
		"year": "2012",
		"doi": "http://dx.doi.org/10.1007/978-3-642-32759-9_23",
		"pdf": "/papers/lazar-arusoaie-serbanuta-ellison-mereuta-lucanu-rosu-2012-fm.pdf",
		"slides": "/papers/lazar-arusoaie-serbanuta-ellison-mereuta-lucanu-rosu-2012-fm-slides.pdf",
		"abstract": [
			"This paper describes the K tool, a system for formally defining programming languages. Formal definitions created using the K tool automatically yield an interpreter for the language, as well as program analysis tools such as a state-space explorer. The modularity of K and the design of the tool allow one semantics to be used for several applications."
		],
	},
	{
		"id": "regehr-chen-cuoq-eide-ellison-yang-2012-pldi",
		"type": "conference",
		"author": "John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison, and Xuejun Yang",
		"title": "Test-case Reduction for C Compiler Bugs",
		"booktitle": "Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation",
		"booktitle_short": "PLDI'12",
		"publisher": "ACM",
		"year": "2012",
		"pages": "335–346",
		"doi": "http://doi.acm.org/10.1145/2254064.2254104",
		"pdf": "/papers/regehr-chen-cuoq-eide-ellison-yang-2012-pldi.pdf",
		"slides": "/papers/regehr-chen-cuoq-eide-ellison-yang-2012-pldi-slides.pdf",
		"project": "http://embed.cs.utah.edu/creduce/",
		"abstract": [
			"To report a compiler bug, one must often find a small test case that triggers the bug. The existing approach to automated test-case reduction, delta debugging, works by removing substrings of the original input; the result is a concatenation of substrings that delta cannot remove. We have found this approach less than ideal for reducing C programs because it typically yields test cases that are too large or even invalid (relying on undefined behavior). To obtain small and valid test cases consistently, we designed and implemented three new, domain-specific test-case reducers. The best of these is based on a novel framework in which a generic fixpoint computation invokes modular transformations that perform reduction operations. This reducer produces outputs that are, on average, more than 25 times smaller than those produced by our other reducers or by the existing reducer that is most commonly used by compiler developers. We conclude that effective program reduction requires more than straightforward delta debugging."
		],
	},
	{
		"id": "ellison-rosu-2012-popl",
		"type": "conference",
		"author": "Chucky Ellison and Grigore Roșu",
		"title": "An Executable Formal Semantics of C with Applications",
		"booktitle": "Proceedings of the 39th Symposium on Principles of Programming Languages",
		"booktitle_short": "POPL'12",
		"publisher": "ACM",
		"year": "2012",
		"pages": "533–544",
		"doi": "http://dx.doi.org/10.1145/2103621.2103719",
		"pdf": "/papers/ellison-rosu-2012-popl.pdf",
		"slides": "/papers/ellison-rosu-2012-popl-slides.pdf",
		"project": "https://github.com/kframework/c-semantics",
		"abstract": [
			"This paper describes an executable formal semantics of C. Being executable, the semantics has been thoroughly tested against the GCC torture test suite and successfully passes 99.2% of 776 test programs.  It is the most complete and thoroughly tested formal definition of C to date. The semantics yields an interpreter, debugger, state space search tool, and model checker \"for free\". The semantics is shown capable of automatically finding program errors, both statically and at runtime. It is also used to enumerate nondeterministic behavior."
		],
	},
	{
		"id": "rosu-ellison-schulte-2010-amast",
		"type": "conference",
		"author": "Grigore Roșu, Chucky Ellison, and Wolfram Schulte",
		"title": "Matching Logic: An Alternative to Hoare/Floyd Logic",
		"booktitle": "Proceedings of the 13th International Conference on Algebraic Methodology And Software Technology",
		"booktitle_short": "AMAST'10",
		"series": "Lecture Notes in Computer Science",
		"publisher": "Springer",
		"volume": "6486",
		"year": "2010",
		"pages": "142–162",
		"doi": "http://dx.doi.org/10.1007/978-3-642-17796-5_9",		
		"pdf": "/papers/rosu-ellison-schulte-2010-amast.pdf",
		"slides": "/papers/rosu-ellison-schulte-2010-amast-slides.pdf",
		"project": "http://www.matching-logic.org/",
		"abstract": [
			"This paper introduces matching logic, a novel framework for defining axiomatic semantics for programming languages, inspired from operational semantics. Matching logic specifications are particular first-order formulae with constrained algebraic structure, called <em>patterns</em>. Program configurations satisfy patterns iff they <em>match</em> their algebraic structure and satisfy their constraints. Using a simple imperative language (IMP), it is shown that a restricted use of the matching logic proof system is equivalent to IMP's Hoare logic proof system, in that any proof derived using either can be turned into a proof using the other. Extensions to IMP including a heap with dynamic memory allocation and pointer arithmetic are given, requiring no extension of the underlying first-order logic; moreover, heap patterns such as lists, trees, queues, graphs, etc., are given algebraically using fist-order constraints over patterns."
		],
	},
	{
		"id": "ilseman-ellison-rosu-2010-tr",
		"type": "tr",
		"author": "Michael Ilseman, Chucky Ellison, and Grigore Roșu",
		"title": "On Compiling Rewriting Logic Language Definitions into Competitive Interpreters",
		"institution": "University of Illinois",
		"month": "December",
		"year": "2010",
		"uri": "http://hdl.handle.net/2142/17444",
		"pdf": "/papers/ilseman-ellison-rosu-2010-tr.pdf",
		"abstract": [
			"This paper describes a completely automated method for generating efficient and competitive interpreters from formal semantics expressed in Rewriting Logic. The semantics are compiled into OCaml code, which then acts as the interpreter for the language being defined. This automatic translation is tested on the semantics of an imperative as well as a functional language, and these generated interpreters are then benchmarked across a number of programs. In all cases the compiled interpreter is faster than directly executing the definition in a Rewriting system with improvements of several orders of magnitude."
		],
	},
	{
		"id": "ellison-rosu-2012-tr",
		"type": "tr",
		"author": "Chucky Ellison and Grigore Roșu",
		"title": "Defining the Undefinedness of C",
		"institution": "University of Illinois",
		"month": "April",
		"year": "2012",
		"uri": "http://hdl.handle.net/2142/30780",
		"pdf": "/papers/ellison-rosu-2012-tr.pdf",
		"abstract": [
			"This paper investigates undefined behavior in C and offers a few simple techniques for operationally specifying such behavior formally. A semantics-based undefinedness checker for C is developed using these techniques, as well as a test suite of undefined programs. The tool is evaluated against other popular analysis tools, using the new test suite in addition to a third-party test suite. The semantics-based tool performs at least as well or better than the other tools tested."
		],
	},
	{
		"id": "k-primer-2012-v33",
		"type": "workshop",
		"author": "Traian Florin Șerbănuță, Andrei Arusoaie, David Lazar, Chucky Ellison, Dorel Lucanu, and Grigore Roșu",
		"title": "The K Primer (version 3.3)",
		"booktitle": "Proceedings of the 2nd International Workshop on the K Framework and Its Applications",
		"booktitle_short": "K'11",
		"series": "Electronic Notes in Theoretical Computer Science",
		"volume": "304",
		"pages": "57–80",
		"year": "2014",
		"doi": "http://dx.doi.org/10.1016/j.entcs.2014.05.003",
		"pdf": "/papers/k-primer-2013-v32.pdf",
		"project": "http://www.kframework.org/",
		"abstract": [
			"This paper serves as a brief introduction to the K tool, a system for formally defining programming languages.  It is shown how sequential or concurrent languages can be defined in K simply and modularly. These formal definitions automatically yield an interpreter for the language, as well as program analysis tools such as a state-space explorer."
		],
	},
	{
		"id": "arusoaie-serbanuta-ellison-rosu-2012-wrla",
		"type": "workshop",
		"author": "Andrei Arusoaie, Traian Florin Șerbănuță, Chucky Ellison, and Grigore Roșu",
		"title": "Making Maude Definitions More Interactive",
		"booktitle": "Rewriting Logic and Its Applications",
		"booktitle_short": "WRLA'12",
		"volume": "7571",
		"series": "Lecture Notes in Computer Science",
		"year": "2012",
		"pages": "83–98",
		"doi": "http://dx.doi.org/10.1007/978-3-642-34005-5_5",
		"pdf": "/papers/arusoaie-serbanuta-ellison-rosu-2012-wrla.pdf",
		"slides": "/papers/arusoaie-serbanuta-ellison-rosu-2012-wrla-slides.pdf",
		"publisher": "Springer",
		"abstract": [
			"This paper presents an interface for achieving interactive executions of Maude terms by allowing console and file input/output (I/O) operations. This interface consists of a Maude API for I/O operations, a Java-based server offering I/O capabilities, and a communication protocol between the two implemented using the external objects concept and Maude's TCP sockets. This interface was evaluated as part of the K framework, providing interactive interpreter capabilities for executing and testing programs for multiple language definitions."
		],
	},
	{
		"id": "ellison-2008-masters-thesis",
		"type": "thesis",
		"author": "Chucky Ellison",
		"title": "A Rewriting Logic Approach to Defining Type Systems",
		"booktitle": "Masters Thesis",
		"publisher": "University of Illinois",
		"year": "2008",
		"uri": "http://hdl.handle.net/2142/18078",
		"pdf": "/papers/ellison-2008-masters-thesis.pdf",
		"abstract": [
			"We show how programming language semantics and definitions of their corresponding type systems can both be written in a single framework amenable to proofs of soundness. The framework is based on full rewriting logic (not to be confused with context reduction or term rewriting), where rules can match anywhere in a term (or configuration).",
			"We present an extension of the syntactic approach to proving type system soundness presented by Wright and Felleisen [1994] that works in the above described semantics-based domain. As before, the properties of preservation and progress are crucial. We use an abstraction function to relate semantic configurations in the language domain to semantic configurations in the type domain, and then proceed to use the preservation and progress properties as usual. We also develop an abstract type system, which is a type system modulo certain structural characteristics.",
			"To demonstrate the method, we give examples of five languages and corresponding type systems.  They include two imperative languages and three functional languages, and three type checkers and two type inferencers. We then proceed to prove that preservation holds for each."
		],
	},
	{
		"id": "ellison-serbanuta-rosu-2008-wadt-b",
		"type": "workshop",
		"author": "Chucky Ellison, Traian Florin Șerbănuță, and Grigore Roșu",
		"title": "A Rewriting Logic Approach to Type Inference",
		"booktitle": "Recent Trends in Algebraic Development Techniques",
		"booktitle_short": "WADT'08",
		"publisher": "Springer",
		"volume": "5486",
		"series": "Lecture Notes in Computer Science",
		"year": "2009",
		"pages": "135–151",
		"doi": "http://dx.doi.org/10.1007/978-3-642-03429-9",
		"pdf": "/papers/ellison-serbanuta-rosu-2008-wadt.pdf",
		"slides": "/papers/ellison-serbanuta-rosu-2008-wadt-slides.pdf",
		"abstract": [
			"Meseguer and Roșu proposed rewriting logic semantics (RLS) as a programing language definitional framework that unifies operational and algebraic denotational semantics. RLS has already been used to define a series of didactic and real languages, but its benefits in connection with defining and reasoning about type systems have not been fully investigated. This paper shows how the same RLS style employed for giving formal definitions of languages can be used to define type systems. The same term-rewriting mechanism used to execute RLS language definitions can now be used to execute type systems, giving type checkers or type inferencers. The proposed approach is exemplified by defining the Hindley-Milner polymorphic type inferencer \\(\\mathcal{W}\\) as a rewrite logic theory and using this definition to obtain a type inferencer by executing it in a rewriting logic engine. The inferencer obtained this way compares favorably with other definitions or implementations of \\(\\mathcal{W}\\). The performance of the executable definition is within an order of magnitude of that of highly optimized implementations of type inferencers, such as that of OCaml."
		],
	},
	{
		"id": "dzakovic-ellison-2007-snapi",
		"type": "workshop",
		"author": "Miroslav Dzakovic and Chucky Ellison",
		"title": "On RDBMS-Integrated Disk-Based Architecture for Managing Massive Dormant Data in a Compressed Format",
		"booktitle": "Proceedings of the 4th International Workshop on Storage Network Architecture and Parallel I/Os",
		"booktitle_short": "SNAPI'07",
		"publisher": "IEEE",
		"year": "2007",
		"pages": "55–59",
		"doi": "http://dx.doi.org/10.1109/SNAPI.2007.16",
		"pdf": "/papers/dzakovic-ellison-2007-snapi.pdf",
		"slides": "/papers/arusoaie-serbanuta-ellison-rosu-2012-wrla-slides.pdf",
		"abstract": [
			"Managing dormant data in very large databases (VLDB) is about striking a balance between cost and performance.  While magnetic tapes have long been a standard answer, the downsides limit the applicability for all VLDB. This paper describes a class of engineering and scientific data management applications that need a cost-effective solution with better support for updating and lower granularity of data access. To meet the needs of such applications, it then introduces an architectural extension to RDBMS. In the architecture, data is compressed using custom compression techniques, stored outside an RDBMS, and made available through views using SQL Table functions. This architecture is applicable to many industrial RDBMS, and it offers both linear speed-up and scale-out. The paper then discusses preliminary findings from a prototype implementation on Oracle RDBMS."
		],
	},
]
